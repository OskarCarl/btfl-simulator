"""
Generated by Claude 3.5 Sonnet, adapted by Oskar Carl
"""

import json, sys
import matplotlib
import matplotlib.pyplot as plt

matplotlib.use('gtk4agg')

# Lists to store the extracted data
accuracies = []
ages = []
line_numbers = []
peer_receive_count = [0 for i in range(50)]
peer_last_accuracies = [0. for i in range(50)]

# Read the log file and extract data
with open(sys.argv[1], 'r') as file:
	for i, line in enumerate(file):
		# Split the line and extract the JSON part
		parts = line.split(':', 2)
		if len(parts) == 3:
			try:
				# Parse the JSON data
				data = json.loads(parts[2].strip().replace("'", '"'))

				if data['action'] == 'eval':
					accuracies.append(data['metrics']['accuracy'])
					ages.append(data['age'])
					line_numbers.append(i)
					peer_last_accuracies[data['peer']] = data['metrics']['accuracy']
				elif data['action'] == 'communicate':
					# Increment receive count for each receiving peer
					for receiving_peer in data['sending_to']:
						peer_receive_count[receiving_peer] += 1
			except (json.JSONDecodeError, KeyError):
				# Skip lines that don't contain the expected JSON structure
				continue

# Create the plots
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20, 8))

# Customize the plot
scatter1 = ax1.scatter(accuracies, ages, c=line_numbers, cmap='viridis')
ax1.set_xlabel('Accuracy')
ax1.set_ylabel('Age')
ax1.set_title('Accuracy vs Age')
plt.colorbar(scatter1, label='Line Number in Log File')

# Second scatter plot: Last Accuracy vs Receive Count
scatter2 = ax2.scatter(peer_receive_count, peer_last_accuracies)
ax2.set_xlabel('Number of Received Updates')
ax2.set_ylabel('Final Accuracy')
ax2.set_title('Final Accuracy vs Received Updates')

# Show the plot
plt.tight_layout()
plt.show()
